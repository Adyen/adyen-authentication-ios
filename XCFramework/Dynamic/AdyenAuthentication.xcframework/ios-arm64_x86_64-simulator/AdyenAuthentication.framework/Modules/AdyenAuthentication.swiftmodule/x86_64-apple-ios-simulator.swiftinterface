// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AdyenAuthentication
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import AdyenAuthentication
import AuthenticationServices
import CommonCrypto
import DeviceCheck
import Foundation
import LocalAuthentication
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class AuthenticationService : AdyenAuthentication.AuthenticationServiceProtocol {
  public typealias Configuration = AdyenAuthentication.DeviceCheckConfiguration
  public init(configuration: AdyenAuthentication.AuthenticationService.Configuration)
  @available(iOS 16.0, *)
  public init(passKeyConfiguration: AdyenAuthentication.PassKeyConfiguration)
  final public func isDeviceRegistered(withAuthenticationInput input: Swift.String) async throws -> Swift.Bool
  final public func registeredCredentials(withAuthenticationInput input: Swift.String) async throws -> [Swift.String]
  final public func authenticate(withAuthenticationInput input: Swift.String) async throws -> Swift.String
  final public func register(withRegistrationInput input: Swift.String) async throws -> Swift.String
  final public var isDeviceSupported: Swift.Bool {
    get
  }
  final public func checkSupport() throws -> Swift.String
  final public func reset() throws
  @objc deinit
}
public struct DeviceCheckConfiguration {
  public let localizedRegistrationReason: Swift.String
  public let localizedAuthenticationReason: Swift.String
  public let appleTeamIdentifier: Swift.String
  public init(localizedRegistrationReason: Swift.String, localizedAuthenticationReason: Swift.String, appleTeamIdentifier: Swift.String)
}
public protocol AuthenticationServiceProtocol : AnyObject, AdyenAuthentication.DeviceSupportCheckerProtocol {
  func isDeviceRegistered(withAuthenticationInput input: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  func registeredCredentials(withAuthenticationInput input: Swift.String, completion: @escaping (Swift.Result<[Swift.String], any Swift.Error>) -> Swift.Void)
  func authenticate(withAuthenticationInput input: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  func register(withRegistrationInput input: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  @available(iOS 13.0.0, *)
  func isDeviceRegistered(withAuthenticationInput input: Swift.String) async throws -> Swift.Bool
  @available(iOS 13.0.0, *)
  func registeredCredentials(withAuthenticationInput input: Swift.String) async throws -> [Swift.String]
  @available(iOS 13.0.0, *)
  func authenticate(withAuthenticationInput input: Swift.String) async throws -> Swift.String
  @available(iOS 13.0.0, *)
  func register(withRegistrationInput input: Swift.String) async throws -> Swift.String
  func reset() throws
}
@available(iOS 13.0, *)
extension AdyenAuthentication.AuthenticationServiceProtocol {
  public func isDeviceRegistered(withAuthenticationInput input: Swift.String, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void)
  public func registeredCredentials(withAuthenticationInput input: Swift.String, completion: @escaping (Swift.Result<[Swift.String], any Swift.Error>) -> Swift.Void)
  public func register(withRegistrationInput input: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  public func authenticate(withAuthenticationInput input: Swift.String, completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
}
public enum AdyenAuthenticationError : Foundation.LocalizedError {
  case unknown
  case userCancelled
  case consecutiveCancellationOnApproval(count: Swift.Int)
  case noStoredCredentialsExist
  case noStoredCredentialsMatch((any Swift.Error)?)
  case credentialsStoreFailure(any Swift.Error)
  case currentDeviceIsNotSupported
  case invalidBundleIdentifier
  case invalidBase64String
  case payloadDecodingFailure(any Swift.Error)
  case payloadEncodingFailure(any Swift.Error)
  case deviceOwnerAuthenticationFailure((any Swift.Error)?)
  case deviceOwnerBiometricsHasChanged
  case deviceIntegrityServiceFailure(any Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol DeviceSupportCheckerProtocol {
  var isDeviceSupported: Swift.Bool { get }
  func checkSupport() throws -> Swift.String
}
public struct PassKeyConfiguration {
  public init(relyingPartyIdentifier: Swift.String, displayName: Swift.String, consecutiveApprovalCancellationsLimit: Swift.Int? = nil, presentationContextWindow: UIKit.UIWindow = UIApplication.shared.keyWindow!)
}
@available(iOS 14.0, *)
public struct DeviceSupportChecker : AdyenAuthentication.DeviceSupportCheckerProtocol {
  public init()
  public var isDeviceSupported: Swift.Bool {
    get
  }
  public func checkSupport() throws -> Swift.String
}
